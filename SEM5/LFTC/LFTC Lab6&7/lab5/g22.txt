N = program decllist declaration type1 arraydecl type cmpdstmt stmtlist stmt simplstmt assignstmt expression term factor iostmt structstmt ifstmt whilestmt condition RELATION
E = plus minus ori impartit_la ia_locul_la mai_mic_ca mai_mic_egal_ca egal_cu mai_mare_egal_ca mai_mare_ca diferit_de modulo [ ] ( ) { } : ; , space lista constanta altfel daca atunci numar_intreg cuvant ori_alba_ori_neagra caracter_simplu numar_cu_virgula citeste EU_BOGDAN_DECLAR cat_timp fa printeaza_urmatoarele armaghedon amin no_dai no_stai de_tip IDENTIFIER CONST
S = program
P =
program->decllist stmtlist amin
program->stmtlist amin
program->amin
decllist->declaration decllist
decllist->EU_BOGDAN_DECLAR declaration
declaration -> IDENTIFIER de_tip type
type1->ori_alba_ori_neagra
type1->caracter_simplu
type1->numar_intreg
type1->cuvant
arraydecl->lista [ ] de_tip type1
type->type1
type->arraydecl
cmpdstmt->no_dai stmtlist no_stai
stmtlist->stmt
stmtlist->stmt stmtlist
stmt->simplstmt
stmt->structstmt
simplstmt->assignstmt
simplstmt->iostmt
assignstmt->expression ia_locul_la IDENTIFIER
expression->expression plus term
expression->expression minus term
expression->expression ori term
expression->expression impartit_la term
expression->expression modulo term
expression->term
term->term plus factor
term->term minus factor
term-term ori factor
term->term impartit_la factor
term->term modulo factor
term->factor
factor->expression
factor->IDENTIFIER
factor->CONST
iostmt->citeste IDENTIFIER
iostmt->printeaza_urmatoarele ( IDENTIFIER | IDENTIFIER { , IDENTIFIER } | CONST )
structstmt->cmpdstmt
structstmt->ifstmt
structstmt->whilestmt
ifstmt->daca condition atunci cmpdstmt
ifstmt->daca condition atunci cmpdstmt altfel cmpdstmt
whilestmt->cat_timp condition fa cmpdstmt
condition->expression RELATION expression
RELATION->mai_mic_ca
RELATION->mai_mic_egal_ca
RELATION->egal_cu
RELATION->diferit_de
RELATION->mai_mare_egal_ca
RELATION->mai_mare_ca