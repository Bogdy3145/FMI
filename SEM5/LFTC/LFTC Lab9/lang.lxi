
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"
int currentLine = 1;
%}

%option noyywrap


identifier		#[a-zA-Z~][a-zA-Z]*$
integer_constant	[1-9][0-9]*nrp|nrn
string_constant	[\"][a-zA-Z0-9 ]+[\"]
char_constant		[\'][a-zA-Z0-9 ][\']

%%

"numar_intreg"		{printf("Reserved word: %s\n", yytext); return INT;}
"cuvant"	{printf("Reserved word: %s\n", yytext); return STRING;}
"caracter_simplu"		{printf("Reserved word: %s\n", yytext); return CHAR;}
"daca"		{printf("Reserved word: %s\n", yytext); return IF;}
"altfel"		{printf("Reserved word: %s\n", yytext); return ELSE;}
"cat_timp"		{printf("Reserved word: %s\n", yytext); return WHILE;}
"program"	{printf("Reserved word: %s\n", yytext); return PROGRAM;}
"lista"		{printf("Reserved word: %s\n", yytext); return LIST;}
"amin"		{printf("Reserved word: %s\n", yytext); return FINISH;}

"plus"		{printf("Operator %s\n", yytext); return plus;}
"minus"		{printf("Operator %s\n", yytext); return  minus;}
"ori"		{printf("Operator %s\n", yytext); return multiply;}
"impartit_la"		{printf("Operator %s\n", yytext); return divide;}
"modulo"		{printf("Operator %s\n", yytext); return modulo;}
"mai_mic_egal_ca"		{printf("Operator %s\n", yytext); return lessOrEqual;}
"mai_mare_egal_ca"		{printf("Operator %s\n", yytext); return moreOrEqual;}
"mai_mic_ca"		{printf("Operator %s\n", yytext); return  less;}
"mai_mare_ca"		{printf("Operator %s\n", yytext); return more;}
"egal"		{printf("Operator %s\n", yytext); return equal;}
"ia_locul_la"		{printf("Operator %s\n", yytext); return assign;}

"{"		{printf("Separator %s\n", yytext); return leftCurlyBracket;}
"}"		{printf("Separator %s\n", yytext); return rightCurlyBracket;}
"("		{printf("Separator %s\n", yytext); return leftRoundBracket;}
")"		{printf("Separator %s\n", yytext); return rightRoundBracket;}
"["		{printf("Separator %s\n", yytext); return leftBracket;}
"]"		{printf("Separator %s\n", yytext); return rightBracket;}
":"		{printf("Separator %s\n", yytext); return colon;}
";"		{printf("Separator %s\n", yytext); return semicolon;}
","		{printf("Separator %s\n", yytext); return comma;}
"'"		{printf("Separator %s\n", yytext); return apostrophe;}
"\""		{printf("Separator %s\n", yytext); return quote;}

{identifier}		{printf("Identifier: %s\n", yytext); return identifier;}
{integer_constant}		{printf("Number: %s\n", yytext); return integer_constant;}
{string_constant}		{printf("String: %s\n", yytext); return string_constant;}
{char_constant}		{printf("Character: %s\n", yytext); return char_constant;}

[ \t]+		{}
[\n]+	{currentLine++;}

[0-9][a-zA-Z0-9_]*		{printf("Illegal identifier at line %d\n", currentLine);}
[+|-]0		{printf("Illegal numeric constant at line %d\n", currentLine);}
[+|-]?[0][0-9]*([.][0-9]*)?		{printf("Illegal numeric constant at line %d\n", currentLine);}
[\'][a-zA-Z0-9 ]{2,}[\']|[\'][a-zA-Z0-9 ][a-zA-Z0-9 ][\']		{printf("Illegal character constant at line %d\n", currentLine);}
[\"][a-zA-Z0-9_]+|[a-zA-Z0-9_]+[\"]		{printf("Illegal string constant at line %d\n", currentLine);}

%%